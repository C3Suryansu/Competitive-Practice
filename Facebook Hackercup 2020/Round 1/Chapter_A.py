# -*- coding: utf-8 -*-
"""ChapA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B06JOGnhUqbunkjh35YnoRgUR_rfbtJ1
"""
#This doesn't contain whole solution, since the case of depression in case of decreasing then increasing building height in the same substructure has not been coded
#Approach being O(n^2), this ain't an optimal solution, but just for reference.

t = int(input())
for _ in range(t):
  n, k, w = map(int, input().split())
  l = list(map(int, input().split()))
  al, bl, cl, dl = map(int, input().split()) 
  h = list(map(int, input().split()))
  ah, bh, ch, dh = map(int, input().split())
  for i in range(n - k):
    val_l = ((al * l[-2] + bl * l[-1] + cl) % dl) + 1
    val_h = ((ah * h[-2] + bh * h[-1] + ch) % dh) + 1
    l.append(val_l)
    h.append(val_h)
  dp = {}
  height = {}
  cur_len = 0
  cur_height = 0
  initial_length = l[0]
  len_pos = l[0]
  p = []
  j = 0
  diff = 0
  for i in range(n):
    if l[i] <= len_pos: 
      cur_len = (l[i] + w) - initial_length - diff
    else:
      cur_len = (l[i] + w) - (l[i] - len_pos) - initial_length - diff
      diff += l[i] - len_pos
      j += 1
      dp[j] = h[i]
      cur_height = h[i]
    cur_height = max(cur_height, h[i])
    dp[j] = cur_height
    #print(cur_len, cur_height, dp)
    p.append(2*(cur_len + sum(dp.values())))
    len_pos = l[i] + w
  prod = 1
  for i in p:
    prod *= i
  print("Case #", str(_ + 1), ": ", prod % (10**9 + 7))
